name: ts win (A)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        default: "0"

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

env:
  TS_HOSTNAME: bullet

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs
        id: cfg
        env:
          RAW_TEST:     ${{ inputs.test_mode }}
          RAW_RUNTIME:  ${{ inputs.runtime_minutes }}
          RAW_LOOPS:    ${{ inputs.loops }}
        run: |
          function ToIntOr($v,$def){if("$v"-match'^\d+$'){[int]$v}else{[int]$def}}

          $isTest  = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')
          $runtime = ToIntOr $env:RAW_RUNTIME 355
          if ($isTest) { $runtime = 5 }
          elseif ($runtime -lt 6 -or $runtime -gt 360) { $runtime = 355 }

          $loops = ToIntOr $env:RAW_LOOPS 0
          if ($loops -lt 0) { $loops = 0 }

          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT
          "isTest=$isTest"   | Out-File -Append $env:GITHUB_OUTPUT

      - name: ‚öôÔ∏è Install Tailscale (if missing) & show version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe' -OutFile $dst
            Start-Process $dst "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & $exe version

      - name: üîê Enable RDP user + firewall
        env:
          RDP_USER: ${{ secrets.RDP_USER }}
          RDP_PASS: ${{ secrets.RDP_PASS }}
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üîó Tailscale up (hostname=bullet)
        id: up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ secrets.TS_AUTHKEY }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          Start-Sleep 2

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          "ip4=$ip4"   | Out-File -Append $env:GITHUB_OUTPUT
          "fqdn=$($status.Self.DNSName)" | Out-File -Append $env:GITHUB_OUTPUT
          "derp=$($status.Self.DERP)"    | Out-File -Append $env:GITHUB_OUTPUT

          "### RDP (A)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $($status.Self.DNSName)`nDERP: $($status.Self.DERP)`nUser: ${{ secrets.RDP_USER }}`nPass: ${{ secrets.RDP_PASS }}" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: ‚è≥ Keep alive
        run: |
          $end=(Get-Date).AddMinutes([int]"${{ steps.cfg.outputs.runtime }}")
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep 60
          }

      - name: üîÅ Dispatch workflow B
        if: always()
        run: |
          $loops=[int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -eq 1) { Write-Host "Loops finished"; exit 0 }
          $next=($(if($loops -gt 1){$loops-1}else{0}))
      
          $body=@{
            ref    = "${{ github.ref_name }}"
            inputs = @{
              test_mode       = "false"
              runtime_minutes = "${{ steps.cfg.outputs.runtime }}"
              loops           = "$next"
            }
          } | ConvertTo-Json -Depth 5
      
          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ts-win-b.yml/dispatches" `
            -Headers @{ Authorization = "Bearer ${{ github.token }}"; "Accept"="application/vnd.github+json" } `
            -Body $body
